#include <iostream> // CPP에서 iostream 헤더는 C++에서 제공하는 입력 및 출력 메커니즘을 담당한다. 
// 기존 stdio가 해오던 역할을, CPP에서는 얘가 하는 것이다.
// C에서 표준 라이브러리의 헤더파일을 표현할 때는 대부분 .h 확장자로 표기하며, 네임스페이스는 사용하지 않았는데,
// 반면 cpp에서는 표준 라이브러리 헤더를 불러올 때 .h를 생략하는 것이다. 그리고 모든 항목이 std 네임스페이스 혹은
// std의 하위 네임스페이스의 아래에 정의되어 있다. 

// 네임스페이스가 무엇인지 정리할 것!

// C에서 사용되던 표준 라이브러리 헤더를 C++에서도 사용할 수 있는데, 다음 두 가지 형태로 제공된다.
// 1. 새로 제공되는 권장버전은 .h라는 확장자 대신 c라는 접두어가 붙는다. ex) <cstdio>
// 2. 예전 버전은 .h라는 확장자가 붙고, 네임스페이스를 사용하지 않는다.

int main(void) {

	std::cout << "Hello World" << std::endl; // 이 부분이 제일 다르다. 
	// std::cout 이라고 한다면, standard::cout 인 것인데,
	// 표준 출력에 출력한다는 의미를 가지고 있다. 
	// 그리고 데이터를 이 표준출력에 올린다는 작업을 << 로 표시한다고 한다. 
	// 다양한 타입의 데이터를 출력 스트림으로 보내는 작업을 단 한 줄의 코드로 표현할 수 있다는 것이다. 
	std::cout << "There are " << 219 << " ways I love you" << std::endl;
	// 텍스트를 출력하고, 숫자를 출력하고, 다시 텍스트를 출력할 수도 있다. 위의 방식처럼 하면 된다. 

	// std::endl은 문장이 끝났다는 것을 의미한다. 출력 스트림에서 std::endl이 나타나면 지금까지 전달한 내용을 모두 출력하고 
	// 다음 줄로 넘어간다. 

	// 스트림은 사용자로부터 입력을 받을 때도 사용한다. 가장 간단한 방법은 입력 스트림에 >> 연산자를 사용하는 것이다. 
	// std::cin 입력 스트림은 사용자가 키보드로 입력한 값을 받는다. 

	int value;
	std::cin >> value;

	printf("%d", value); // 타입 안전성(type safe)를 보장하지 않기 때문에, 앞으로 위의 방법으로 입출력을 한다고 한다.

	return 0;
}